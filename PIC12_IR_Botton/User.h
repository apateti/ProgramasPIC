/* 
 * File:   User.h
 * Author: APateti
 *
 * Created on 16 de julio de 2015, 03:30 PM
 */
//
//Se definen los Valores de la Memoria EEPROM
//
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x00
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x08
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x10
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x18
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x20
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x28
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x30
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x38
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x40
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x48
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x50
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x58
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x60
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x68
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x70
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x78
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x80
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x88
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x90
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0x98
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0xA0
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0xA8
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0xB0
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0xB8
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0xC0
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0xC8
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0xD0
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0xD8
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0xE0
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0xE8
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0xF0
__EEPROM_DATA(0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF);		//ADDR 0xF8

 //
 /*		Se definentodas las variables y Registros
  *		a utilizar en el Programa
  */
union{
	char	Byte_Banderas;
	struct{
		unsigned	:1;				// 1 si Se empieza a Rx los bits de Datos IR
		unsigned	:1;				// 1 si Finalizo de Rx el dato IR
		unsigned	:1;				// 1 si Se empieza a Rx el Tiempo de START
		unsigned	:1;				// Reservado
		unsigned	Tec_1V:1;		// 1 Si se detecta que se presiono por 1ra ves la Tacla IR
		unsigned	Tec_Lib:1;		// 1 Si se Libero la Tecla
		unsigned	Tec_Pres:1;		// 1 Mientras la Tecla se mantiene presionada
		unsigned	Fin_T0:1;		// 1 cuando Finaliza la Interrupcion T0
	};								
}BanderasBits;
 /*		Se definentodas las variables y Registros
  *		a utilizar en el Programa
  *		Banderas o Flag para el IR
  */
union{
	char	Byte_IR;
	struct{
		unsigned	START:1;	// 1 si Se empieza a Rx el Start del IR
		unsigned	DATA:1;		// 1 si Se empieza a Rx los bits de Datos IR
		unsigned	Prog:1;		// 1 si Se empieza a Rx el Tiempo de START
		unsigned	FinIR:1;	// 1 si Finalizo de Rx el dato IR
		unsigned	Sleep_IR:1;			// Reservado
		unsigned	:1;			// Reservado
		unsigned	:1;			// Reservado
		unsigned	Igual_Patron:1;	// 1 Si El IR Rx es Igual al Grabado
	};								
}FlagIRBits;
 /*		Bandera Para Histeresis
  *		a utilizar en el Programa
  */
//union{
//	char	Byte_Histeresis;
//	struct{
//		unsigned	Histe_Prom:1;	// 1 si Se cumple la Histeresis para hacer Promedio
//		unsigned	Activ_Prom:1;	// Reservado
//		unsigned	Rebote:1;		// Reservado
//		unsigned	:1;				// Reservado
//		unsigned	:1;				// Reservado
//		unsigned	:1;				// Reservado
//		unsigned	H_N:1;			// Reservado
//		unsigned	H_P_N:1;		// Reservado
//	};								
//}HisteresisBits;